for (i in 1:3736){
mle_F = mle.zigp(Yin=t(unname(trans_dataF[i,])), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = t(trans_dataF[3737,]), init = T)
dataF_ZIGP_para[i,] = c(as.numeric((mle_F$Fitted.Values/trans_dataF[3737,])[1]),mle_F$Dispersion.Parameter[1],mle_F$ZI.Parameter[1],mle_F$Log.Likelihood)
print(i)
}
dim(trans_dataF)
dim(dataF)
trans_dataF = dataF[-rm_gene,]
dim(trans_dataF)
mle_F = mle.zigp(Yin=t(unname(trans_dataF[i,])), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = t(trans_dataF[3737,]), init = T)
trans_dataF = as.matrix(dataF)
mle_F = mle.zigp(Yin=t(unname(trans_dataF[i,])), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = t(trans_dataF[3737,]), init = T)
dim(trans_dataF)
trans_dataF = dataF[-rm_gene,]
dim(trans_dataF)
mle_F = mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T)
dataF_ZIGP_para[i,] = c(as.numeric((mle_F$Fitted.Values[1]/trans_dataF[3737,1])),mle_F$Dispersion.Parameter[1],mle_F$ZI.Parameter[1],mle_F$Log.Likelihood)
mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T)
pscl::hurdle(t(unname(trans_dataF[i,]))~1|1, offset=log(t(trans_dataF[3737,])), dist="poisson")
fit.hurdle <- pscl::hurdle(t(unname(trans_dataF[i,]))~1|1, offset=log(t(trans_dataF[3737,])), dist="poisson")
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = FALSE)
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = FALSE)
mle_F = mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T)
fm.X <- ~ 1
fm.W <- ~ 1
fm.Z <- ~ 1
dim(trans_dataF)
dataF_ZIGP_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
mle_F = mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T)
dataF_ZIGP_para[i,] = c(as.numeric((mle_F$Fitted.Values[1]/trans_dataF[3737,1])),mle_F$Dispersion.Parameter[1],mle_F$ZI.Parameter[1],mle_F$Log.Likelihood)
print(i)
}
##ZIP model
fm.X <- ~ 1
fm.W <- NULL
fm.Z <- ~ 1
dataF_ZIP_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataA[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
##GP model
fm.X <- ~ 1
fm.W <- ~ 1
fm.Z <- NULL
dataF_GP_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
mle_F = mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T)
dataF_GP_para[i,] = c(as.numeric((mle_F$Fitted.Values/trans_dataF[3737,])[1]),mle_F$Dispersion.Parameter[1],mle_F$ZI.Parameter[1],mle_F$Log.Likelihood)
print(-i)
}
load("/Users/bobo/Desktop/origindata.RData")
##dataF
##rule out the gene which doesn't contain 0
dataF_no_ZI = c(0)
for (i in 1:3736){
if (min(t(unname(trans_dataF[i,]))) > 0)
dataF_no_ZI=c(dataF_no_ZI,i)
}
##estimate the model
adjust_dataF_ZINB_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "negbin"),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="negbin")
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "negbin",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
adjust_dataF_ZINB_para[i,] = c(as.numeric(model$coefficients$count),as.numeric(model$coefficients$zero),model$theta,model$loglik)
}else
adjust_dataF_ZINB_para[i,] = c(as.numeric(model$coefficients$count),as.numeric(model$coefficients$zero),model$theta,model$loglik)
}
}
zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "negbin")
##estimate the model
library(pscl)
adjust_dataF_ZINB_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "negbin"),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="negbin")
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "negbin",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
adjust_dataF_ZINB_para[i,] = c(as.numeric(model$coefficients$count),as.numeric(model$coefficients$zero),model$theta,model$loglik)
}else
adjust_dataF_ZINB_para[i,] = c(as.numeric(model$coefficients$count),as.numeric(model$coefficients$zero),model$theta,model$loglik)
}
}
##data F
dataF_NB_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736) {
model = glm.nb(t(unname(trans_dataF[i,])) ~ 1 + offset(log(t(trans_dataF[3737,]))) )
dataF_NB_para[i,] = c(as.numeric(model$coefficients),model$theta,model$aic,model$twologlik)
print(i)
}
##data F
library(MASS)
dataF_NB_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736) {
model = glm.nb(t(unname(trans_dataF[i,])) ~ 1 + offset(log(t(trans_dataF[3737,]))) )
dataF_NB_para[i,] = c(as.numeric(model$coefficients),model$theta,model$aic,model$twologlik)
print(i)
}
for (i in 1:3736) {
model = glm.nb(unname(trans_dataF[i,]) ~ 1 + offset(log(trans_dataF[3737,])) )
dataF_NB_para[i,] = c(as.numeric(model$coefficients),model$theta,model$aic,model$twologlik)
print(i)
}
##dataF
dataF_ZINB_para = adjust_dataF_ZINB_para
liki_dataF = cbind(1:3736, dataF_ZIGP_para[,4], dataF_ZIP_para[,4], dataF_GP_para[,4], dataF_ZINB_para[,4], dataF_NB_para[,4]/2 )
liki_dataF = liki_dataF[-dataF_no_ZI, ]
colnames(liki_dataF) = c("no.", "ZIGP", "ZIP", "GP", "ZINB", "NB")
liki_dataF_complete = liki_dataF[complete.cases(liki_dataF),]
##dataF
aic_dataF = 4 - 2*liki_dataF_complete[,-1]
aic_dataF[,1] = aic_dataF[,1] + 2
aic_dataF[,4] = aic_dataF[,4] + 2
colnames(aic_dataF)
aic_dataF[1:5,]
aic_model_dataF = apply(aic_dataF, 1, which.min)
length(aic_model_dataF)
dim(liki_dataF_complete)
complete.cases(liki_dataF)
dim(dataF_ZIGP_para)
dataF_ZIGP_para[3000,]
dataF_ZIP_para[,4][3000,]
dataF_ZIP_para[3000,]
dataF_GP_para[,4]
dataF_ZINB_para[,4]
dataF_NB_para[,4]/2
dataF_ZIP_para
dim(dataF_ZIP_para)
dataF_ZIP_para[1:10]
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataA[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
##ZIP model
fm.X <- ~ 1
fm.W <- NULL
fm.Z <- ~ 1
dataF_ZIP_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataA[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
i = 40
mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T)
##ZIP model
library(ZIGP)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataA[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
dataF_ZIP_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataA[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
dataF_ZIP_para = matrix(nrow = 3736, ncol = 4)
for (i in 1:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataF[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
i
i=54
fit.hurdle <- pscl::hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
pscl::zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients)
library(pscl)
for (i in 105:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- psclhurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataF[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
i
for (i in 1466:3736){
if (i %in% dataF_no_ZI)
a=1
else{
model = try(mle.zigp(Yin=unname(trans_dataF[i,]), fm.X=fm.X, fm.W=fm.W, fm.Z=fm.Z, Offset = trans_dataF[3737,], init = T),silent = TRUE)
if ('try-error' %in% class(model)){
fit.hurdle <- hurdle(unname(trans_dataF[i,])~1|1, offset=log(trans_dataF[3737,]), dist="poisson")
model = try(zeroinfl(unname(trans_dataF[i,]) ~ 1|1, offset=log(trans_dataF[3737,]), dist = "poisson",start=fit.hurdle$coefficients),silent = TRUE)
if ('try-error' %in% class(model)){
print(i)
}else
dataF_ZIP_para[i,] = c(as.numeric(model$coefficients$count),NA,as.numeric(model$coefficients$zero),model$loglik)
}else
dataF_ZIP_para[i,] =  c(as.numeric((model$Fitted.Values/trans_dataF[3737,])[1]),model$Dispersion.Parameter[1],model$ZI.Parameter[1],model$Log.Likelihood)
}
}
##dataF
dataF_ZINB_para = adjust_dataF_ZINB_para
liki_dataF = cbind(1:3736, dataF_ZIGP_para[,4], dataF_ZIP_para[,4], dataF_GP_para[,4], dataF_ZINB_para[,4], dataF_NB_para[,4]/2 )
liki_dataF = liki_dataF[-dataF_no_ZI, ]
colnames(liki_dataF) = c("no.", "ZIGP", "ZIP", "GP", "ZINB", "NB")
liki_dataF_complete = liki_dataF[complete.cases(liki_dataF),]
##dataF
aic_dataF = 4 - 2*liki_dataF_complete[,-1]
aic_dataF[,1] = aic_dataF[,1] + 2
aic_dataF[,4] = aic_dataF[,4] + 2
colnames(aic_dataF)
aic_dataF[1:5,]
aic_model_dataF = apply(aic_dataF, 1, which.min)
length(aic_model_dataF)
#merge
model_ZI = cbind(c(aic_model_dataF,aic_model_dataF,aic_model_dataF,aic_model_dataF),c(rep("dataI",3669),rep("dataF",3653),rep("dataA",3647),rep("dataB",3660)))
colnames(model_ZI) = c("model","data")
#merge
model_ZI = cbind(c(aic_model_dataF,aic_model_dataF,aic_model_dataF,aic_model_dataF),c(rep("dataI",3650),rep("dataF",3650),rep("dataA",3650),rep("dataB",3650)))
colnames(model_ZI) = c("model","data")
model_ZI = as.data.frame(model_ZI)
#Hist_with0
library(ggplot2)
p = ggplot(model_ZI, aes(x=data,fill=model))+geom_bar(width=0.5, position=position_dodge(0.6))
p + scale_fill_discrete(label = c("ZIGP","ZIP","GP","ZINB","NB"))
#Poi_model
aic_poi_dataF = apply(aic_dataF[,1:3], 1, which.min)
model_poi = cbind(c(aic_poi_dataF,aic_poi_dataF,aic_poi_dataF,aic_poi_dataF),c(rep("dataI",3669),rep("dataF",3653),rep("dataA",3647),rep("dataB",3660)))
model_poi = cbind(c(aic_poi_dataF,aic_poi_dataF,aic_poi_dataF,aic_poi_dataF),c(rep("dataI",3650),rep("dataF",3650),rep("dataA",3650),rep("dataB",3650)))
colnames(model_poi) = c("model","data")
model_poi = as.data.frame(model_poi)
p = ggplot(model_poi, aes(x=data,fill=model))+geom_bar(width=0.5, position=position_dodge(0.6))
p + scale_fill_discrete(label = c("ZIGP","ZIP","GP"))
#Model_NB
aic_NB_dataF = apply(aic_dataF[,4:5], 1, which.min)
model_NB = cbind(c(aic_NB_dataI,aic_NB_dataF,aic_NB_dataA,aic_NB_dataB),c(rep("dataI",3650),rep("dataF",3650),rep("dataA",3650),rep("dataB",3650)))
model_NB = cbind(c(aic_NB_dataF,aic_NB_dataF,aic_NB_dataF,aic_NB_dataF),c(rep("dataI",3650),rep("dataF",3650),rep("dataA",3650),rep("dataB",3650)))
colnames(model_NB) = c("model","data")
model_NB = as.data.frame(model_NB)
p = ggplot(model_NB, aes(x=data,fill=model))+geom_bar(width=0.5, position=position_dodge(0.6))
p + scale_fill_discrete(label = c("ZINB","NB"))
#liki
liki_model_dataF = apply(liki_dataF_complete[,-1],1, which.max)
logliki_model = cbind(c(liki_model_dataF,liki_model_dataF,liki_model_dataF,liki_model_dataF),c(rep("dataI",3669),rep("dataF",3653),rep("dataA",3647),rep("dataB",3660)))
logliki_model = cbind(c(liki_model_dataF,liki_model_dataF,liki_model_dataF,liki_model_dataF),c(rep("dataI",3650),rep("dataF",3650),rep("dataA",3650),rep("dataB",3650)))
colnames(logliki_model) = c("model","data")
logliki_model = as.data.frame(logliki_model)
table(logliki_model)
p = ggplot(logliki_model, aes(x=data,fill=model))+geom_bar(width=0.5, position=position_dodge(0.6))
p + scale_fill_discrete(label = c("ZIGP","ZIP","GP","ZINB","NB"))
p = ggplot(logliki_model, aes(x=data,fill=model))+geom_bar(width=0.5, position=position_dodge(0.6)) + xlim(0,1500)
p + scale_fill_discrete(label = c("ZIGP","ZIP","GP","ZINB","NB"))
p = ggplot(logliki_model, aes(x=data,fill=model))+geom_bar(width=0.5, position=position_dodge(0.6)) + ylim(0,1500)
p + scale_fill_discrete(label = c("ZIGP","ZIP","GP","ZINB","NB"))
load("~/Desktop/Data0801B.RData")
View(dataI_logliki_NB)
var = apply(dataI_logliki_NB,1,var)
which.max(var)
var[185]
dataI_logliki_NB[185,]
sum(dataI_logliki_NB[185,])
summary(var)
library(MASS)
NB_outlier = glm.nb(t(trans_dataI[185,]) ~ 1 + offset(log(t(trans_dataI[3737,]))) )
NB_outlier$fitted.values[1:5]
NB_outlier$theta
NB_outlier$twologlik/2
dataI_ZINB_para[185,4]
dataI_ZIGP_para[185,4]
dataI_GP_para[185,4]
dataI_logliki_ZIGP[185,4]
dataI_logliki_GP[185,4]
dataI_logliki_ZINB[185,4]
dataI_logliki_GP[185,4]*5
dataI_logliki_GP[185,]
sum(dataI_logliki_GP[185,])
which.max(var[-185])
var[2313]
dataI_logliki_NB[185,]
sum(dataI_logliki_NB[185,])
dataI_logliki_NB[2313,]
sum(dataI_logliki_NB[2313,])
dataI_logliki_GP[2313,]
sum(dataI_logliki_GP[2313,])
which.max(var[-c(185,2313),])
dataI_logliki_NB[595,]
sum(dataI_logliki_NB[595,])
sum(dataI_logliki_GP[595,])
dataI_logliki_NB[3549,]
dataI_logliki_GP[3549,]
sum(dataI_logliki_GP[3549,])
sum(dataI_logliki_NB[3549,])
summary(var)
load("/Users/bobo/Desktop/Rdata/Data0815.RData")
i = 1
table(dataI[1,])
table(unname(dataI[1,]))
table(unname(dataI[1,]))
table(as.numeric(unname(dataI[1,])))
table(dataI_NB_simulation[1,])
table(as.numeric(unname(dataI[9,])))
table(dataI_NB_simulation_noZI[1,])
5.15
5/14
5/11
2/(10+9+4+8+1+5+7+3+3+4+7+7+8+9+10+10)
10+9+4+8+1+5+7+3+3+4+7+7+8+9+10+10
5/(2+10+2+8+10+6+10+10+10+10+5+5+10+5+8+5+1+6)
5/(5+4+5+5+2+5+1+5+3+5+1)
65085/986342
664/986342
115/986342
56/65029
56/65085
608/921257
19/65085
96/921257
682/843/(161/843)
127/466/(339/466)
4.236025/0.3746313
1/11.30718
682/843/(127/466)
161/843/(339/466)
regsub.mat
bodyfat.dat=read.csv('cleanfile.csv')
getwd()
setwd("./Desktop/stat-628-module-2/data")
bodyfat.dat=read.csv('cleanfile.csv')
final.model <- lm(BODYFAT ~ WEIGHT+ABDOMEN+WRIST,data=bodyfat.dat)
plot(final.model, which = 1:6)
bodyfat.dat[c(202, 219, 220), ]
bodyfat.dat[c(202, 219, 220), ]
bodyfat.dat[c(77, 216, 245), ]
bodyfat.dat[c(202, 219, 220), c("WEIGHT", "ABDOMEN", "WRIST") ]
bodyfat.dat[c(202, 219, 220), c("BODYFAT","DENSITY", "WEIGHT", "ABDOMEN", "WRIST") ]
bodyfat.dat[c(77, 216, 245),c("BODYFAT","DENSITY", "WEIGHT", "ABDOMEN", "WRIST")  ]
par(mfrow = c(1,2))
plot(final.model, which = 1:2)
par(mfrow = c(2,3))
plot(final.model, which = 1:6)
#residual plots: no non-linear trend, can be considered as equal variance
MASS::boxcox(BODYFAT ~ WEIGHT+ABDOMEN+WRIST,data=bodyfat.dat)
#residual plots: no non-linear trend, can be considered as equal variance
MASS::boxcox(bodyfat.dat$BODYFAT ~ bodyfat.dat$WEIGHT+bodyfat.dat$ABDOMEN+bodyfat.dat$WRIST)
summary(bodyfat.dat$BODYFAT)
sort(bodyfat.dat$BODYFAT)
which(bodyfat.dat$BODYFAT==0)
bodyfat.dat = bodyfat.dat[-177,]
library(leaps)
#function definitions
#my.regsub selects variables using aic and cp
my.regsub <- function(matrix,y,nbest,method,nvmax=8){
n<-length(y)
p<-ncol(matrix)+1
temp <- regsubsets(matrix,y,nbest=nbest,method=method,nvmax=nvmax)
temp.mat <- cbind(summary(temp)$which,summary(temp)$cp,
summary(temp)$bic+p*(2-log(n)), summary(temp)$bic)
dimnames(temp.mat)[[2]] <- c(dimnames(summary(temp)$which)[[2]],
"cp", "aic", "bic")
return(temp.mat)
}
regsub.mat<-my.regsub(bodyfat.dat[,-c(1,2)],bodyfat.dat$BODYFAT,nbest=1,method = "exhaustive")
regsub.mat[which.min(regsub.mat[,"aic"]),]
#Keep WEIGHT, ABDOMEN, WRIST under AIC criteron
regsub.mat[which.min(regsub.mat[,"cp"]),]
#Keep AGE, HEIGHT, NECK, CHEST, ABDOMEN, FOREARM, RIST under Mallow's Cp criteron
regsub.mat[which.min(regsub.mat[,"bic"]),]
#regression diagnostic
final.model <- lm(BODYFAT ~ WEIGHT+ABDOMEN+WRIST,data=bodyfat.dat)
summary(final.model)
par(mfrow = c(2,3))
plot(final.model, which = 1:6)
#residual plots: no non-linear trend, can be considered as equal variance
MASS::boxcox(bodyfat.dat$BODYFAT ~ bodyfat.dat$WEIGHT+bodyfat.dat$ABDOMEN+bodyfat.dat$WRIST)
par(mfrow = c(1,1))
plot(final.model, which = 1:6)
#points with higher cook's distance
bodyfat.dat[c(77, 216, 245),c("BODYFAT","DENSITY", "WEIGHT", "ABDOMEN", "WRIST")  ]
rstudent(final.model)
which(abs(rstudent(final.model))>2.576)
which(abs(rstandard(final.model))>2.576)
##see whether has high leverage point(x as a outlier with h too large)
hatvalues(final.model)
outliertest(final.model)
outlierTest(final.model)
car::outlierTest(final.model)
dim(final.model)
dim(bodyfat.dat)
##see whether has high leverage point(x as a outlier with h too large)
2*4/dim(bodyfat.dat)[1]
##see whether has high leverage point(x as a outlier with h too large)
which(hatvalues(final.model)>2*4/dim(bodyfat.dat)[1]) # 2p/n
hatvalues(final.model)
##see whether has high leverage point(x as a outlier with h too large)
which(hatvalues(final.model)>(2*4/dim(bodyfat.dat)[1])) # 2p/n
##see whether has high leverage point(x as a outlier with h too large)
(2*4/dim(bodyfat.dat)[1])
which(hatvalues(final.model)>0.03252033) # 2p/n
##see high influential point(Cook's distance large)
cooks.distance(final.model)
##see high influential point(Cook's distance large)
4/(dim(bodyfat.dat)[1]-4)
which(cooks.distance(final.model)>0.01652893)
#or just
influential.measure(final.model)
#or just
influence.measures(final.model)
which(abs(dffits(final.model))>2/sqrt(dim(bodyfat.dat)[1]))
unname(which(cooks.distance(final.model)>0.01652893))
unname(which(hatvalues(final.model)>0.03252033) )
unname(which(cooks.distance(final.model)>1))
a=read.csv('BodyFat.csv')
#outlier
outlierTest(lm.dirte1)
library(car)
#outlier
outlierTest(lm.dirte1)
#outlier
MASS::outlierTest(lm.dirte1)
#outlier
outlierTest(lm.dirte1)
lm.dirte1 <- lm(BODYFAT ~ ., data=subset(a[-c(42,39,48,96,76),],select=-DENSITY))
#outlier
outlierTest(lm.dirte1)
summary(bodyfat.dat$BODYFAT)
summary(a$BODYFAT)
